** SQL Queries
CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4;

** EDA **
-- check the number of unique apps in both tablesAppleStoreAppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds
FROM appleStore_description_combined

--Check for any missing values in key fields
SELECT COUNT(*) AS MissingValues
FROM AppleStore WHERE track_name IS NULL OR user_rating IS NULL OR prime_genre IS NULL

SELECT COUNT(*) FROM AppleStore_Description_Combined WHERE app_desc IS NULL;

--Find out the number of Apps per Genre:

SELECT prime_genre, COUNT(*) AS NumberOfApps 
FROM AppleStore 
GROUP BY prime_genre ORDER BY NumberOfApps DESC;

--get an overview of the app Ratings (min, max, average):
SELECT MIN(user_rating) AS MinRating, 
MAX(user_rating) AS MaxRating, 
AVG(user_rating) AS AvgRating 
FROM AppleStore;

** DATA ANALYSIS **
--Determine whether paid apps have higher ratings than Free Apps:
SELECT 
  CASE 
    WHEN Price > 0 THEN 'Paid' 
    ELSE 'Free' 
  END AS AppType,
  AVG(user_rating) AS AverageRating 
FROM AppleStore 
GROUP BY AppType;

--Check if apps with more supported languages have higher Ratings:
SELECT 
  CASE 
    WHEN lang_num < 10 THEN 'Less than 10 Languages'
    WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 Languages'
    ELSE 'More than 30 Languages' 
  END AS LanguageBucket,
  AVG(user_rating) AS AverageRating
FROM AppleStore 
GROUP BY LanguageBucket 
ORDER BY AverageRating DESC;

--Genres with Low Ratings:
SELECT prime_genre, AVG(user_rating) AS AverageRating 
FROM AppleStore 
GROUP BY prime_genre
ORDER BY AverageRating ASC
LIMIT 10;

--Check if there is correlation between app Description Length and user Ratings:
SELECT 
  CASE 
    WHEN LENGTH(b.app_desc) < 500 THEN 'Short'
    WHEN LENGTH(b.app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
    ELSE 'Long' 
  END AS description_length_bucket,
  AVG(a.user_rating) AS average_rating
  
FROM AppleStore AS A
JOIN appleStore_description_combined AS b
ON a.ID = b.ID
GROUP BY description_length_bucket
ORDER BY average_rating DESC;

--Check the top rated apps for each genre
SELECT prime_genre,track_name,user_rating
FROM ( SELECT prime_genre,track_name,user_rating,
      RANK() OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) AS rank
      FROM AppleStore 
      ) AS a 
WHERE a.rank = 1

--Top Rated Apps by Genre (Window Function):
SELECT prime_genre, track_name, user_rating, RANK() OVER (PARTITION BY prime_genre ORDER BY user_rating DESC) AS Rank
FROM AppleStore 
ORDER BY prime_genre, Rank;











